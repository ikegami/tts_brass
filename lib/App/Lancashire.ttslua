-- ================================================================================
-- Brass: Lancashire
-- ================================================================================

-- Modules.
local Const        = require("kintastic/lib/Const")
local DictUtils    = require("kintastic/lib/DictUtils")
local Iters        = require("kintastic/lib/Iters")
local Promise      = require("kintastic/lib/Promise")
local StrUtils     = require("kintastic/lib/StrUtils")
local TableLock    = require("kintastic/lib/TableLock")
local TtsMsgUtils  = require("kintastic/lib/TtsMsgUtils")
local TtsObject    = require("kintastic/lib/Promise/TtsObject")
local TtsObjUtils  = require("kintastic/lib/TtsObjUtils")
local TtsWait      = require("kintastic/lib/Promise/TtsWait")
local TtsZoneUtils = require("kintastic/lib/TtsZoneUtils")
local App          = require("mods/Brass/lib/App")

-- Imports.
local const                = Const.const
local rconst               = Const.rconst
local pick                 = DictUtils.pick
local ivalues              = Iters.ivalues
local starts_with          = StrUtils.starts_with
local lock                 = TableLock.lock
local rlock                = TableLock.rlock
local broadcast_error      = TtsMsgUtils.broadcast_error
local get_abs_height       = TtsObject.get_abs_height
local get_bot_pos          = TtsObject.get_bot_pos
local get_top_pos          = TtsObject.get_top_pos
local move_atop_smooth     = TtsObject.moveAtopSmooth
local set_position_smooth  = TtsObject.setPositionSmooth
local set_transform_smooth = TtsObject.setTransformSmooth
local take_object          = TtsObject.takeObject
local resolve_guids        = TtsObjUtils.resolve_guids
local wait_condition       = TtsWait.cond
local wait_frames          = TtsWait.frames
local find_zone            = TtsZoneUtils.find_zone

-- The class.
local LancashireApp = { }

-- Inherit functions from App.
local SUPER = App

setmetatable(LancashireApp, {
   __index = SUPER,
})

LancashireApp.mt = {
   __index = LancashireApp,
}


-- ================================================================================
-- Object initialization

function LancashireApp:init(saved_state_json)
   SUPER.init(self, saved_state_json)
   self.initial_funds = 30
   self.loan_amount = 10
   self.money_value = false   -- Will change later.
end


function LancashireApp:init_industry_tile_data()
   -- Don't lock since used as lookup.
   self.industry_tile_data = rconst({
      [ "Coal Mine I"     ] = lock({ type = "Coal Mine",   level = 1, count = 1, canal_era = true,  rail_era = false, cost_money =  5, cost_coal = 0, cost_iron = 0, points =  1, income = 4, link_points = 1, can_develop = true }),
      [ "Coal Mine II"    ] = lock({ type = "Coal Mine",   level = 2, count = 2, canal_era = true,  rail_era = true,  cost_money =  7, cost_coal = 0, cost_iron = 0, points =  2, income = 7, link_points = 1, can_develop = true }),
      [ "Coal Mine III"   ] = lock({ type = "Coal Mine",   level = 3, count = 2, canal_era = true,  rail_era = true,  cost_money =  8, cost_coal = 0, cost_iron = 1, points =  3, income = 6, link_points = 1, can_develop = true }),
      [ "Coal Mine IV"    ] = lock({ type = "Coal Mine",   level = 4, count = 2, canal_era = true,  rail_era = true,  cost_money = 10, cost_coal = 0, cost_iron = 1, points =  4, income = 5, link_points = 1, can_develop = true }),
      [ "Cotton Mill I"   ] = lock({ type = "Cotton Mill", level = 1, count = 3, canal_era = true,  rail_era = false, cost_money = 12, cost_coal = 0, cost_iron = 0, points =  5, income = 5, link_points = 1, can_develop = true }),
      [ "Cotton Mill II"  ] = lock({ type = "Cotton Mill", level = 2, count = 2, canal_era = true,  rail_era = true,  cost_money = 14, cost_coal = 1, cost_iron = 0, points =  5, income = 4, link_points = 1, can_develop = true }),
      [ "Cotton Mill III" ] = lock({ type = "Cotton Mill", level = 3, count = 3, canal_era = true,  rail_era = true,  cost_money = 16, cost_coal = 1, cost_iron = 1, points =  9, income = 3, link_points = 1, can_develop = true }),
      [ "Cotton Mill IV"  ] = lock({ type = "Cotton Mill", level = 4, count = 3, canal_era = true,  rail_era = true,  cost_money = 18, cost_coal = 1, cost_iron = 1, points = 12, income = 2, link_points = 1, can_develop = true }),
      [ "Iron Works I"    ] = lock({ type = "Iron Works",  level = 1, count = 1, canal_era = true,  rail_era = false, cost_money =  5, cost_coal = 1, cost_iron = 0, points =  3, income = 3, link_points = 1, can_develop = true }),
      [ "Iron Works II"   ] = lock({ type = "Iron Works",  level = 2, count = 1, canal_era = true,  rail_era = true,  cost_money =  7, cost_coal = 1, cost_iron = 0, points =  5, income = 3, link_points = 1, can_develop = true }),
      [ "Iron Works III"  ] = lock({ type = "Iron Works",  level = 3, count = 1, canal_era = true,  rail_era = true,  cost_money =  9, cost_coal = 1, cost_iron = 0, points =  7, income = 2, link_points = 1, can_develop = true }),
      [ "Iron Works IV"   ] = lock({ type = "Iron Works",  level = 4, count = 1, canal_era = true,  rail_era = true,  cost_money = 12, cost_coal = 1, cost_iron = 0, points =  9, income = 1, link_points = 1, can_develop = true }),
      [ "Port I"          ] = lock({ type = "Port",        level = 1, count = 1, canal_era = true,  rail_era = false, cost_money =  6, cost_coal = 0, cost_iron = 0, points =  2, income = 3, link_points = 1, can_develop = true }),
      [ "Port II"         ] = lock({ type = "Port",        level = 2, count = 1, canal_era = true,  rail_era = true,  cost_money =  7, cost_coal = 0, cost_iron = 0, points =  4, income = 3, link_points = 1, can_develop = true }),
      [ "Port III"        ] = lock({ type = "Port",        level = 3, count = 1, canal_era = true,  rail_era = true,  cost_money =  8, cost_coal = 0, cost_iron = 0, points =  6, income = 4, link_points = 1, can_develop = true }),
      [ "Port IV"         ] = lock({ type = "Port",        level = 4, count = 1, canal_era = true,  rail_era = true,  cost_money =  9, cost_coal = 0, cost_iron = 0, points =  9, income = 4, link_points = 1, can_develop = true }),
      [ "Shipyard I"      ] = lock({ type = "Shipyard",    level = 1, count = 2, canal_era = true,  rail_era = false, cost_money = 16, cost_coal = 1, cost_iron = 1, points = 10, income = 2, link_points = 1, can_develop = true }),
      [ "Shipyard II"     ] = lock({ type = "Shipyard",    level = 2, count = 2, canal_era = false, rail_era = true,  cost_money = 25, cost_coal = 1, cost_iron = 1, points = 18, income = 1, link_points = 1, can_develop = true }),
   })
end


function LancashireApp:init_objects()
   local state = self.state
   local num_players = state:get_num_players()

   SUPER.init_objects(self)

   local guids = {
      distant_market_marker = "e7a73c",

      coal_bag = "e54c1a",
      iron_bag = "ac9020",

      -- For 2, 3, and 4 players respectively.
      distant_market_bags = { "844d10", "064067", "33a1fd" },

      deck_splitter = "7e93fe",

      play_deck_zone = "497481",

      distant_market_deck_zone    = "8c807c",
      distant_market_discard_zone = "ac11de",

      -- In the order they are emptied/visited.
      coal_market_zones = { "3c5ffd", "14aada", "ec2671", "39e20b", "56e563", "2e35ed", "6c1ee9", "bb3394" },
      iron_market_zones = { "550e2a", "581ae8", "6581f5", "6c2b6d", "3bcd07", "2734e8", "0a7292", "2beec8" },
      distant_market_zones = { "d02bc1", "7921a6", "e8e801", "9d419f", "844a56", "045c53", "6bca4e", "436909", "617a3c" },

      -- Each zone is called a "location square".
      -- Using .getGMNotes() on the location square gets the name of the location.
      locations = {
         [ "Barrow-in-Furness"    ] = { [ "Barrow-in-Furness (W)"    ] = "426a10",
                                        [ "Barrow-in-Furness (E)"    ] = "cf611f" },
         [ "Birkenhead"           ] = { [ "Birkenhead"               ] = "3ccdcc" },
         [ "Blackburn"            ] = { [ "Blackburn (N)"            ] = "6f807f",
                                        [ "Blackburn (W)"            ] = "38f370",
                                        [ "Blackburn (E)"            ] = "68b7fb" },
         [ "Bolton"               ] = { [ "Bolton (NW)"              ] = "087a08",
                                        [ "Bolton (NE)"              ] = "b699b0",
                                        [ "Bolton (S)"               ] = "358114" },
         [ "Burnley"              ] = { [ "Burnley (N)"              ] = "bb78b2",
                                        [ "Burnley (S)"              ] = "d2d30a" },
         [ "Bury"                 ] = { [ "Bury (N)"                 ] = "4d037f",
                                        [ "Bury (S)"                 ] = "a0a19f" },
         [ "Colne"                ] = { [ "Colne (N)"                ] = "711ca4",
                                        [ "Colne (S)"                ] = "05533c" },
         [ "Ellesmere Port"       ] = { [ "Ellesmere Port"           ] = "d2b988" },
         [ "Fleetwood"            ] = { [ "Fleetwood"                ] = "275cb6" },
         [ "Lancaster"            ] = { [ "Lancaster (W)"            ] = "faa397",
                                        [ "Lancaster (E)"            ] = "594082" },
         [ "Liverpool"            ] = { [ "Liverpool (NW)"           ] = "e3b7a3",
                                        [ "Liverpool (NE)"           ] = "91911b",
                                        [ "Liverpool (SW)"           ] = "50d45a",
                                        [ "Liverpool (SE)"           ] = "d6e737" },
         [ "Macclesfield"         ] = { [ "Macclesfield (W)"         ] = "3323a4",
                                        [ "Macclesfield (E)"         ] = "875228" },
         [ "Manchester"           ] = { [ "Manchester (NW)"          ] = "33f755",
                                        [ "Manchester (NE)"          ] = "12686f",
                                        [ "Manchester (SW)"          ] = "ff7d65",
                                        [ "Manchester (SE)"          ] = "efed8b" },
         [ "Oldham"               ] = { [ "Oldham (W)"               ] = "c14e85",
                                        [ "Oldham (E)"               ] = "f438fe" },
         [ "Preston"              ] = { [ "Preston (NW)"             ] = "ec5dd1",
                                        [ "Preston (NE)"             ] = "2b0036",
                                        [ "Preston (S)"              ] = "ed3210" },
         [ "Rochdale"             ] = { [ "Rochdale (N)"             ] = "010e97",
                                        [ "Rochdale (SW)"            ] = "c9f3a4",
                                        [ "Rochdale (SE)"            ] = "f88687" },
         [ "Stockport"            ] = { [ "Stockport (W)"            ] = "a15ce2",
                                        [ "Stockport (E)"            ] = "129bf3" },
         [ "Warrington & Runcorn" ] = { [ "Warrington & Runcorn (W)" ] = "29e020",
                                        [ "Warrington & Runcorn (E)" ] = "245596" },
         [ "Wigan"                ] = { [ "Wigan (N)"                ] = "101933",
                                        [ "Wigan (S)"                ] = "f97fdc" },
      },

      -- Using .getGMNotes() on the link gets the name found here.
      links = {
         [ "Barrow-in-Furness - Lancaster"         ] = "6f2977",
         [ "Birkenhead - Ellesmere Port"           ] = "f14ab3",
         [ "Blackburn - Bolton"                    ] = "d0120f",
         [ "Blackburn - Burnley"                   ] = "b59ed4",
         [ "Blackburn - Preston"                   ] = "79d991",
         [ "Blackburn - Wigan"                     ] = "cac219",
         [ "Blackpool - Preston"                   ] = "4e1582",
         [ "Bolton - Bury"                         ] = "048b74",
         [ "Bolton - Manchester"                   ] = "2e310e",
         [ "Bolton - Wigan"                        ] = "14cbda",
         [ "Burnley - Bury"                        ] = "079905",
         [ "Burnley - Colne"                       ] = "069e2b",
         [ "Bury - Manchester"                     ] = "4c642b",
         [ "Bury - Rochdale"                       ] = "eaee25",
         [ "Colne - Yorkshire"                     ] = "12c4ca",
         [ "Ellesmere Port - Liverpool"            ] = "af204d",
         [ "Ellesmere Port - Northwich"            ] = "c378a7",
         [ "Ellesmere Port - Warrington & Runcorn" ] = "63ad80",
         [ "Fleetwood - Preston"                   ] = "80624b",
         [ "Lancaster - Preston"                   ] = "bdb232",
         [ "Lancaster - Scotland"                  ] = "c8c36a",
         [ "Liverpool - Southport"                 ] = "d540b6",
         [ "Liverpool - Warrington & Runcorn"      ] = "7f2bc1",
         [ "Liverpool - Wigan"                     ] = "e0d583",
         [ "Macclesfield - Stockport"              ] = "dd8b61",
         [ "Macclesfield - The Midlands"           ] = "4610a8",
         [ "Manchester - Oldham"                   ] = "bc38fc",
         [ "Manchester - Stockport"                ] = "14c4a7",
         [ "Manchester - Warrington & Runcorn"     ] = "bfcd3a",
         [ "Northwich - The Midlands"              ] = "06f6e9",
         [ "Oldham - Rochdale"                     ] = "f4097d",
         [ "Preston - Southport"                   ] = "f7d09d",
         [ "Preston - Wigan"                       ] = "4bcea1",
         [ "Rochdale - Yorkshire"                  ] = "05b47e",
         [ "Southport - Wigan"                     ] = "5da6db",
         [ "Warrington & Runcorn - Wigan"          ] = "8e2ac6",
      },
   }

   if state:get_game_started() then
      local rail_era_started = state:get_current_phase() >= App.Phases.RAIL_ERA_ROUND

      guids.distant_market_bags = pick(guids.distant_market_bags,
         |i, guid|i == num_players - 1 and not rail_era_started
      )
   end

   TableLock.merge(self.objects, resolve_guids(guids))
end


function LancashireApp:init_resources()
   local objects = self.objects

   self.resources = rconst(rlock({
      coal = { resource_name = "Coal", bag = objects.coal_bag, market_zones = objects.coal_market_zones },
      iron = { resource_name = "Iron", bag = objects.iron_bag, market_zones = objects.iron_market_zones },
   }))

   SUPER.init_resources(self)
end


function LancashireApp:init_locations_and_links()
   -- Don't lock since used as lookup.
   self.bonuses_by_external_location = const({
      [ "Blackpool"    ] = 2,
      [ "Northwich"    ] = 2,
      [ "Scotland"     ] = 2,
      [ "Southport"    ] = 2,
      [ "The Midlands" ] = 2,
      [ "Yorkshire"    ] = 2,
   })

   SUPER.init_locations_and_links(self)
end


-- ================================================================================
-- UI initialization

function LancashireApp:create_buttons()
   local game_board = self.objects.game_board

   SUPER.create_buttons(self)

   game_board.createButton({
      label="+", click_function="on_click_add_coal_to_market",
      position={ -9.529565, 11.26932, 10.34858 }, rotation={ 0, 180, 0 },
      height=300, width=300, font_color={ 0, 0, 0, 1 }, font_size=250,
   })
   game_board.createButton({
      label="-", click_function="on_click_sub_coal_from_market",
      position={ -9.529565, 11.26932, 9.487037 }, rotation={ 0, 180, 0 },
      height=300, width=300, font_color={ 0, 0, 0, 1 }, font_size=250,
   })

   game_board.createButton({
      label="+", click_function="on_click_add_iron_to_market",
      position={ -13.32889, 11.26932, 10.34858 }, rotation={ 0, 180, 0 },
      height=300, width=300, font_color={ 0, 0, 0, 1 }, font_size=250,
   })
   game_board.createButton({
      label="-", click_function="on_click_sub_iron_from_market",
      position={ -13.32889, 11.26932, 9.487037 }, rotation={ 0, 180, 0 },
      height=300, width=300,font_color={ 0, 0, 0, 1 }, font_size=250,
   })
end


-- ================================================================================
-- UI event handlers

LancashireApp:export("on_click_sell_to_distant_market", function(self, obj, player_color, mouse_button)
   if not self.state:get_game_started() or not self.state:is_active_player(player_color) then return end
   self:sell_to_distant_market(player_color)
end)


-- ================================================================================
-- Game advancement

function LancashireApp:do_start_round()
   local objects = self.objects
   local state   = self.state
   return
      SUPER.do_start_round(self)
      :next(
         function()
            if state:get_current_phase() == App.Phases.RAIL_ERA_ROUND
            and state:get_current_round() == state:get_num_rounds() - 4
            then
               local rotation = Vector(0, 180, 180)

               local zone = objects.play_deck_zone
               for obj in ivalues(zone.getObjects()) do
                  if obj.name == "Deck" or obj.name == "Card" then
                     obj.setRotation(rotation)
                  end
               end

               objects.deck_splitter.destruct()
               objects.deck_splitter = nil

               UI.setAttribute("PurpleLoanBttn", "interactable", "false")  UI.setAttribute("PurpleLoanImg", "visibility", "-")
               UI.setAttribute("TealLoanBttn",   "interactable", "false")  UI.setAttribute("TealLoanImg",   "visibility", "-")
               UI.setAttribute("OrangeLoanBttn", "interactable", "false")  UI.setAttribute("OrangeLoanImg", "visibility", "-")
               UI.setAttribute("YellowLoanBttn", "interactable", "false")  UI.setAttribute("YellowLoanImg", "visibility", "-")
            end
         end
      )
end


function LancashireApp:end_turn()
   local state = self.state

   local current_player = state:get_current_player()

   -- Check if the player actually completed their turn.
   if not state:get_opt_skip_discard_check() then
      if not self:are_discards_full(current_player) then
         local player = Player[current_player]
         if player.seated then
            broadcast_error(current_player .. ", you can’t end your turn because you don’t have exactly 1 card in each of your discard piles!", current_player)
         else
            broadcast_error("The round can’t be ended because " .. current_player .. " doesn’t have exactly 1 card in each of their discard piles!")
         end

         return Promise:resolve()
      end
   end

   return SUPER.end_turn(self)
end


-- ================================================================================
-- Setup

function LancashireApp:setup_canal_era()
   local promises = { }
   table.insert(promises, SUPER.setup_canal_era(self))
   table.insert(promises, self:setup_distant_market())

   return
      Promise:all_settled(promises)
      :next(Promise.all_settled_error_logger)
end


function LancashireApp:setup_distant_market()
   local objects = self.objects

   local num_players = self.state:get_num_players()

   local promise
   for i, distant_market_bag in ipairs(objects.distant_market_bags) do
      if i == num_players - 1 then
         promise = self:spawn_distant_market_deck(distant_market_bag)
      else
         distant_market_bag.destruct()
         objects.distant_market_bags[i] = nil
      end
   end

   return promise
end


function LancashireApp:setup_rail_era()
   self.money_value = 10   -- Meaning 1 VP per £10.

   local promises = { }
   table.insert(promises, SUPER.setup_rail_era(self))
   table.insert(promises, self:reset_distant_market())

   return
      Promise:all_settled(promises)
      :next(Promise.all_settled_error_logger)
end


function LancashireApp:reset_distant_market()
   local objects = self.objects

   local promises = { }

   do
      local marker = objects.distant_market_marker
      local zone = objects.distant_market_zones[1]
      table.insert(promises,
         move_atop_smooth(marker, zone, { protrusion = 0.75, rotation = true })
         :next(|marker|wait_condition(||marker.resting, marker, 3, "Timeout moving distant market marker."))
      )
   end

   do
      local zone = objects.distant_market_discard_zone
      for obj in ivalues(zone.getObjects()) do
         if starts_with(obj.getGMNotes(), "Distant Market") then
            obj.destruct()
         end
      end
   end

   self:find_distant_market_deck().destruct()

   do
      local num_players = self.state:get_num_players()
      local distant_market_bag = objects.distant_market_bags[ num_players - 1 ]
      table.insert(promises, self:spawn_distant_market_deck(distant_market_bag))

      distant_market_bag.destruct()
      objects.distant_market_bags[ num_players - 1 ] = nil

   end

   return
      Promise:all_settled(promises)
      :next(Promise.all_settled_error_logger)
end


function LancashireApp:setup_deck_rail_era()
   local objects = self.objects
   local splitter = objects.deck_splitter
   local zone = objects.play_deck_zone
   local num_players = self.state:get_num_players()

   local pos

   return
      SUPER.setup_deck_rail_era(self)
      :next(
         function(deck)
            pos = get_bot_pos(deck)
            deck.setLock(true)
            return move_atop_smooth(deck, zone)
         end
      )
      :next(
         function(deck)
            local splitter_height = get_abs_height(splitter)
            local deck_height     = get_abs_height(deck)

            local splitter_pos = pos:copy()
            splitter_pos.y = splitter_pos.y + 0.2 * 2*num_players + 0.2 + splitter_height/2

            local deck_pos = splitter_pos:copy()
            deck_pos.y = deck_pos.y + splitter_height/2 + 0.2 + deck_height/2

            local splitter_rot = splitter.getRotation()
            splitter_rot.z = ( splitter_rot.z + 180 ) % 360
            splitter.setLock(true)
            return
               set_transform_smooth(splitter, {
                  position = splitter_pos,
                  rotation = splitter_rot,
               })
               :next(
                  function(splitter)
                     local promises = { }

                     for i = 1, 2*num_players do
                        pos.y = pos.y + 0.2
                        table.insert(promises,
                           take_object(deck, {
                              position = pos,
                              rotation = Vector(0, 90, 180),
                           })
                        )
                     end

                     return
                        Promise:all_settled(promises)
                        :next(Promise.all_settled_error_logger)
                  end
               )
               :next(
                  function()
                     splitter.setLock(false)
                     deck.setLock(false)

                     return
                        wait_frames(1)
                        :next(||wait_condition(||splitter.resting and deck.resting, deck, 3, "Timeout setting up deck."))
                  end
               )
         end
      )
end


-- ================================================================================
-- Discard pile manipulations

function LancashireApp:are_discards_full(color_name)
   for i = 1, 2 do
      local count = self:get_discarded_count(color_name, i)
      if count ~= 1 then
         return false
      end
   end

   return true
end


-- ================================================================================
-- Distant market

function LancashireApp:spawn_distant_market_deck(distant_market_bag)
   local objects = self.objects
   local distant_market_deck_zone = objects.distant_market_deck_zone
   return
      take_object(distant_market_bag, {
         position = distant_market_deck_zone.getPosition(),
         rotation = distant_market_deck_zone.getRotation(),
      })
      :next(
         function(deck)
            return
               wait_condition(||deck.resting, deck, 3, "Timeout setting up distant market.")
               :next(
                  function(deck)
                     deck.setLock(true)
                     deck.shuffle()
                     return deck
                  end
               )
         end
      )
end

function LancashireApp:find_distant_market_marker()
   local objects = self.objects
   local i = find_zone(objects.distant_market_zones, objects.distant_market_marker)
   return i
end


function LancashireApp:find_distant_market_deck()
   local zone = self.objects.distant_market_deck_zone
   for obj in ivalues(zone.getObjects()) do
      if starts_with(obj.getGMNotes(), "Distant Market Tiles") then
         return obj
      end
   end

   return nil
end


function LancashireApp:sell_to_distant_market(color_name)
   local objects = self.objects
   local player = objects.players[color_name]

   local initial_marker_idx = self:find_distant_market_marker()
   if not initial_marker_idx then
      broadcast_error("Can’t find the distant market marker!")
      return
   end

   if initial_marker_idx == 9 then
      broadcast_error(color_name .. ", you can’t sell to the distant market due to lack of demand!", color_name)
      return
   end

   local deck = self:find_distant_market_deck()
   local zone = objects.distant_market_discard_zone
   local p = take_object(deck, {
      position = get_top_pos(zone),
      rotation = zone.getRotation(),
   })
   :next(
      function(tile)
         local advancement = tonumber(string.sub(tile.getGMNotes(), -1))
         local final_marker_index = initial_marker_idx + advancement
         if final_marker_index > 9 then
            final_marker_index = 9
         end

         local income_advancement = math.floor( ( 8 - final_marker_index ) / 2 )

         local promises = { }
         local msg
         local msg_color_name = color_name

         if income_advancement > 0 then
            local marker = player.income_marker
            local old_ofs = self:get_track_position_offset(marker)
            local new_ofs = old_ofs + income_advancement
            table.insert(promises, self:move_marker(marker, new_ofs, true))
            msg = color_name .. " sold to the distant market. Their income increased to " .. new_ofs .. " (from " .. old_ofs .. ")."
         elseif income_advancement == 0 then
            msg = color_name .. " sold to the distant market. Their income remained unchanged."
         else
            msg = color_name .. " attempted to sell to the distant market, but there was no demand."
            msg_color_name = "Red"
         end

         if initial_marker_idx ~= final_marker_index then
            local marker = objects.distant_market_marker
            local zone = objects.distant_market_zones[final_marker_index]
            table.insert(promises,
               move_atop_smooth(marker, zone, { protrusion = 0.75, rotation = true })
               :next(|marker|wait_condition(||marker.resting, marker, 3, "Timeout moving distant market marker."))
            )
         end

         return
            Promise:all_settled(promises)
            :next(Promise.all_settled_error_logger)
            :finally(
               function()
                  printToAll(msg, msg_color_name)
               end
            )
      end
   )
   :done()
end


-- ================================================================================

return LancashireApp
